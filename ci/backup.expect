#!/usr/bin/expect

set timeout 180

# ASSUME: power is on
# ASSUME: tty speed set by upstream script
spawn -open [open /dev/ttyS0 w+]
# ASSUME: reset is setup
after 500
exec echo 0 > /sys/class/gpio/gpio24/value
after 200
exec echo 1 > /sys/class/gpio/gpio24/value

expect {
    -re {\_\|TT\|\_ROOTKEY.BOOTPW,.*\_\|TE\|\_} {
	# enter the boot password
	after 500
	exec echo -n -e "test\r" > /dev/ttyS0
        exp_continue -continue_timer
    }
    -re {\_\|TT\|\_PDDB.MOUNTED,.*\_\|TE\|\_} {
	after 1000
	exec echo -n -e "pddb basiscreate citest\r" > /dev/ttyS0
        exp_continue -continue_timer
    }
    -re {\_\|TT\|\_PDDB.REQPW,.*\_\|TE\|\_} {
	after 1000
	exec echo -n -e "p@ss\r" > /dev/ttyS0
        exp_continue -continue_timer
    }
    -re {\_\|TT\|\_PDDB.CREATEOK,.*\_\|TE\|\_} {
	after 1000
	exec echo -n -e "pddb basisunlock citest\r" > /dev/ttyS0
        exp_continue -continue_timer
    }
    -re {\_\|TT\|\_PDDB.UNLOCKOK,.*\_\|TE\|\_} {
	after 1000
	exec echo -n -e "pddb write testdict:testkey precursor_test_data\r" > /dev/ttyS0
	after 500
	exec echo -n -e "pddb sync\r" > /dev/ttyS0
	
	# scroll up to creating a backup, counting on menu wrap-around
	after 3000
	puts "Starting backup process"
	exec bash -c {echo -n -e $'\e'\[1~ > /dev/ttyS0}
        after 500
	exec bash -c {echo -n -e $'\e'\[A > /dev/ttyS0}
        after 150
	exec bash -c {echo -n -e $'\e'\[A > /dev/ttyS0}
        after 150
	exec bash -c {echo -n -e $'\e'\[A > /dev/ttyS0}
        after 150
	exec bash -c {echo -n -e $'\e'\[1~ > /dev/ttyS0}
        exp_continue -continue_timer
    }
    -re {\_\|TT\|\_ROOTKEY.UPDPW,.*\_\|TE\|\_} {
	exec echo -n -e "4 <ng>r_P@sw0rd\r" > /dev/ttyS0
	# ample time for the backup to prep
	after 8000
	# space bar to dismiss the bip-39 display
	exec echo -n -e " " > /dev/ttyS0
        exp_continue -continue_timer
    }
    -re {\_\|TT\|\_ROOTKEY.CONFIRM,.*\_\|TE\|\_} {
	# dismiss the check bip-39 routine
	after 1500
	exec bash -c {echo -n -e $'\e'\[B > /dev/ttyS0}
        after 300
	exec bash -c {echo -n -e $'\e'\[1~ > /dev/ttyS0}
        after 300
	exec bash -c {echo -n -e $'\e'\[B > /dev/ttyS0}
        after 300
	exec bash -c {echo -n -e $'\e'\[1~ > /dev/ttyS0}
	# 10 seconds for the backup to complete -- should be enough!
        after 10000
	puts "Backup prepared, running backup process..."
    }
}

# takes about 7-8 minutes on the Pi
exec rm -f /mnt/ramdisk/backup.pddb

set timeout 700
# this script needs to be placed in this directory by the CI system
# we don't check it into VCS because it would be out of sync with the
# actual version that's in the xous kernel tools directory. instead,
# an scp operation is used by jenkins to stage it from the latest version.
try {
    set results [exec ./backup.py --output /mnt/ramdisk/backup.pddb]
    set status 0
} trap CHILDSTATUS {results options} {
    puts "Backup exited with non-zero status, but that is OK: $results"
}

puts "Backup script finished"

exit 0
