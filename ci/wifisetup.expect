#!/usr/bin/expect

set passing 0
set gotip 0

set fp [open "credentials.txt" r]
set file_data [read $fp]
close $fp
set creds [split $file_data ,]
set ssid [lindex $creds 0]
set passwd [lindex $creds 1]
set subnet [lindex $creds 2]

# ASSUME: power is on
# ASSUME: tty speed set by upstream script
spawn -open [open /dev/ttyS0 w+]
# ASSUME: reset is setup

set iters 0

while { $iters < 3 && $gotip == 0 } {
    set timeout 120
    after 500
    exec echo 0 > /sys/class/gpio/gpio24/value
    after 200
    exec echo 1 > /sys/class/gpio/gpio24/value
    expect {
	-re {\_\|TT\|\_ROOTKEY.BOOTPW,.*\_\|TE\|\_} {
	    # enter the boot password
	    after 500
	    exec echo -n -e "test\r" > /dev/ttyS0
	    exp_continue -continue_timer
	}
	-re {\_\|TT\|\_PDDB.MOUNTED,.*\_\|TE\|\_} {
	    after 8000
	    exec echo -n -e "wlan setssid $ssid\r" > /dev/ttyS0
	    after 4000
	    exec echo -n -e "wlan setpass $passwd\r" > /dev/ttyS0
	    after 4000
	    exec echo -n -e "wlan join\r" > /dev/ttyS0
	    set iters [expr $iters + 1]
	    exp_continue -continue_timer
	}
	-re {\_\|TT\|\_NET.OK,.*\_\|TE\|\_} {
	    set status [split $expect_out(0,string) ","]
	    set ipaddr [lindex $status 1]
	    puts $ipaddr
	    set ipoctets [split $ipaddr .]
	    puts $ipoctets
	    puts $subnet
	    if {[lindex $ipoctets 0] == 10
		&& [lindex $ipoctets 1] == 0
		&& [lindex $ipoctets 2] == $subnet} {
		puts "Got IP address"
		set gotip 1
	    } else {
		puts "IP address mismatch"
		exp_continue -continue_timer
	    }
	}
    }
}

if { $gotip == 1 } {
    after 1000
    exec echo -n -e "wlan save\r" > /dev/ttyS0
    after 1000
    # see if we can't get 10 pings in 20 seconds
    set timeout 20
    exec echo -n -e "net ping google.com 10\r" > /dev/ttyS0
    set pongcount 0
    expect {
		-re {\_\|TT\|\_NET.PONG,.*\_\|TE\|\_} {
			set pong [split $expect_out(0,string) ","]
			set pongcount [expr $pongcount + 1]
			exp_continue -continue_timer
		}
    }
    # allow for some dropout, because networks are unreliable: 9 or 10 pongs is passing
    if {$pongcount > 8} {
		puts "Pongcount: $pongcount"
		set passing 1
    }
}

set timeout 30
exec echo -n -e "pddb sync\r" > /dev/ttyS0
expect {
    -re {\_\|TT\|\_PDDB.SYNCDONE,.*\_\|TE\|\_} {
		puts "sync done, shutting down"
    }
}
after 4000

if { $passing == 1 } {
    puts "Wlan Passed"
    exit 0
} else {
    puts "Wlan Failed"
    exit 1
}
